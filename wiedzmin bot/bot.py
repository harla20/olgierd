import config
import logging
import random
from aiogram import Bot, Dispatcher, executor, types
import os, json, string
from db import Database
import asyncio
from aiogram.types.message import ContentTypes
from aiogram.types.message import ContentType
import sqlite3
import markups as nav

import time
import datetime

#log level
logging.basicConfig(level=logging.INFO)

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
db = Database('database.db')

#async def on_startup(_):
	#await bot.send_message(-1001373568416, "–Ø –≤–µ—Ä–Ω—É–ª—Å—è <b>(–±–æ—Ç –æ–Ω–ª–∞–π–Ω ‚úÖ)</b>", parse_mode="html")

#–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥—ã
def minutes_to_seconds(minutes):
	return minutes * 60

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–µ—Ä–º—ã
def time_ost(get_time):
	time_now = int(time.time())
	middle_time = int(get_time) - time_now

	if middle_time <= 0:
		return False
	else:
		dt = str(datetime.timedelta(seconds=middle_time))
		return dt



@dp.message_handler(commands=["mute"], commands_prefix="+")
async def mute(message: types.Message):
    if str(message.from_user.id) == config.ADMIN_ID or config.ADMIN_ID2 or config.ADMIN_ID3:
    	if not message.reply_to_message:
    	    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    	    return
    	mute_sec = int(message.text[6:])
    	db.add_mute(message.reply_to_message.from_user.id, mute_sec)
    	await message.answer(f"–¢–µ—Å—Ç–æ–≤—ã–π –º—É—Ç –Ω–∞ {mute_sec} —Å–µ–∫—É–Ω–¥")


    #–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–µ—Ä–º—ã
@dp.message_handler()
async def filter_messages(message: types.Message):

    if message.text.lower() =="—Ñ–∞—Ä–º":
        florens = random.randint(4, 50)
        bonus = random.randint(4, 50)
        if (not db.user_ex(message.from_user.id)): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ ferma
            current_datetime = int(time.time()) + minutes_to_seconds(180) #–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö + 3 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–µ—Ä–º—ã
            db.add_user(message.from_user.id, message.from_user.first_name, florens, current_datetime) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
            await message.answer("<b>üåû | –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <u>" + str(florens) + "</u> —Ñ–ª–æ—Ä–µ–Ω–æ–≤!</b>", parse_mode='html', reply_markup=nav.Bonuses)
        else:
            user_time_ost = time_ost(db.get_time(message.from_user.id))
            if user_time_ost == False:
                if (not(db.bonus_ex(message.from_user.id))):
                    await message.answer("<b>üåû | –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <u>" + str(florens) + "</u> —Ñ–ª–æ—Ä–µ–Ω–æ–≤!</b>", parse_mode='html', reply_markup=nav.Bonuses)
                    if (not(db.bonus2_ex(message.from_user.id))):
                        current_datetime = int(time.time()) + minutes_to_seconds(180)
                        db.set_time(current_datetime, message.from_user.id)
                        db.balance_update(int(db.get_balance(message.from_user.id)) + florens, message.from_user.first_name,message.from_user.id)
                    else:
                        current_datetime = int(time.time()) + minutes_to_seconds(120)
                        db.set_time(current_datetime, message.from_user.id)
                        db.balance_update(int(db.get_balance(message.from_user.id)) + florens, message.from_user.first_name, message.from_user.id)
                else:
                    await message.answer("<b>üåû | –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <u>" + str(int(florens + bonus)) + "</u> —Ñ–ª–æ—Ä–µ–Ω–æ–≤!</b>\n" 
                    "<b>üíé | –ë–æ–Ω—É—Å–Ω—ã–µ " + str(bonus) + "</b>", parse_mode='html', reply_markup=nav.Bonuses)
                    if (not (db.bonus2_ex(message.from_user.id))):
                        current_datetime = int(time.time()) + minutes_to_seconds(180)
                        db.set_time(current_datetime, message.from_user.id)
                        db.balance_update(int(db.get_balance(message.from_user.id)) + florens, message.from_user.first_name, message.from_user.id)
                    else:
                        current_datetime = int(time.time()) + minutes_to_seconds(120)
                        db.set_time(current_datetime, message.from_user.id)
                        db.balance_update(int(db.get_balance(message.from_user.id)) + florens, message.from_user.first_name, message.from_user.id)
            else:
                if (not (db.bonus2_ex(message.from_user.id))):
                    await message.answer("<b>‚õîÔ∏è | –í—Ä–µ–º—è - –¥–µ–Ω—å–≥–∏.\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞: " + str(user_time_ost) + "</b>", parse_mode='html', reply_markup=nav.Bonuses)
                else:
                    await message.answer("<b>‚õîüïäÔ∏è | –í—Ä–µ–º—è - –¥–µ–Ω—å–≥–∏.\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞: " + str(user_time_ost) + "</b>", parse_mode='html', reply_markup=nav.Bonuses)

    if message.text.lower() == "–º–æ–π –±–∞–ª–∞–Ω—Å":
    	if (not db.user_ex(message.from_user.id)):
    		await message.answer("<b>–í–∞—à–∏ –∫–∞—Ä–º–∞—à–∫–∏ –ø—É—Å—Ç—ã!</b>", parse_mode='html')
    	else:
            if db.bonus_ex(message.from_user.id) & db.bonus2_ex(message.from_user.id):
                user_balance = db.get_balance(message.from_user.id)
                await message.answer("<b>ü™ô | –í—Å–µ–≥–æ –≤ –∫–∞—Ä–º–∞–Ω–µ: <u>" + user_balance + "</u> —Ñ–ª–æ—Ä–µ–Ω–æ–≤</b>"
                '\n<b>‚≠ê | –ë–æ–Ω—É—Å—ã:</b> –õ–∞—Å—Ç–æ—á–∫–∞üïä, –í—Ç–æ—Ä–∞—è –∂–∏–∑–Ω—åüíé ', parse_mode='html')

            elif db.bonus2_ex(message.from_user.id):
                user_balance = db.get_balance(message.from_user.id)
                await message.answer("<b>ü™ô | –í—Å–µ–≥–æ –≤ –∫–∞—Ä–º–∞–Ω–µ: <u>" + user_balance + "</u> —Ñ–ª–æ—Ä–µ–Ω–æ–≤</b>"
                '\n<b>‚≠ê | –ë–æ–Ω—É—Å—ã:</b> –õ–∞—Å—Ç–æ—á–∫–∞üïä', parse_mode='html')

            elif db.bonus_ex(message.from_user.id):
                user_balance = db.get_balance(message.from_user.id)
                await message.answer("<b>ü™ô | –í—Å–µ–≥–æ –≤ –∫–∞—Ä–º–∞–Ω–µ: <u>" + user_balance + "</u> —Ñ–ª–æ—Ä–µ–Ω–æ–≤</b>"
                '\n<b>‚≠ê | –ë–æ–Ω—É—Å—ã:</b> –í—Ç–æ—Ä–∞—è –∂–∏–∑–Ω—åüíé', parse_mode='html')

            else:
                user_balance = db.get_balance(message.from_user.id)
                await message.answer("<b>ü™ô | –í—Å–µ–≥–æ –≤ –∫–∞—Ä–º–∞–Ω–µ: <u>" + user_balance + "</u> —Ñ–ª–æ—Ä–µ–Ω–æ–≤</b>", parse_mode='html')









    #—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–∞
    if message.text.lower() == "—è –≤–µ—Ä–Ω—É–ª—Å—è":
    	await message.reply('–û—Ç–∫—É–¥–∞?')

    if message.text.lower() == "—è –≤–µ—Ä–Ω—É–ª–∞—Å—å":
        await message.reply('–û—Ç–∫—É–¥–∞?')


    #—Ä–µ–∫–∞—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–æ —Ä—ã–∂–∏–π
    text = message.text.lower()
    for word in config.WORDS_RIJIY:
        if word in text:
    	    await message.reply('–í–µ–¥–∏ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ, –ø—Ä–∏–±–ª—É–¥–∞!')
    	    await message.delete()

    #—Ä–µ–∫–∞—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–æ –≤–µ–¥—å–º–∞–∫
    if {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in message.text.split(' ')}\
        .intersection(set(json.load(open('who.json')))) != set():
        await message.reply('–ê –∫—Ç–æ —ç—Ç–æ??')

    # —Ç–æ–ø —Ñ–ª–æ—Ä–µ–Ω–æ–≤ —á–∞—Ç–∞
    if message.text.lower() == "—Ç–æ–ø—Ñ":
	    await message.reply("üìà<b> 15 –ë–û–ì–ê–¢–ï–ô–®–ò–• –õ–Æ–î–ï–ô:</b>" +'\n'+'\n'
        '1. ü•á ' + (db.get_kollNAME())  + ' ‚Äî ' + (str(db.get_koll())) +'\n'
        '2. ü•à ' + (db.get_kollNAME2()) + ' ‚Äî ' + (str(db.get_koll2()))+'\n'
        '3. ü•â ' + (db.get_kollNAME3()) + ' ‚Äî ' + (str(db.get_koll3()))+'\n'
        '4.  ' + (db.get_kollNAME4()) + ' ‚Äî ' + (str(db.get_koll4()))+'\n'
        '5.  ' + (db.get_kollNAME5()) + ' ‚Äî ' + (str(db.get_koll5()))+'\n'
        '6.  ' + (db.get_kollNAME6()) + ' ‚Äî ' + (str(db.get_koll6()))+'\n'
        '7.  ' + (db.get_kollNAME7()) + ' ‚Äî ' + (str(db.get_koll7()))+'\n'
        '8.  ' + (db.get_kollNAME8()) + ' ‚Äî ' + (str(db.get_koll8()))+'\n'
        '9.  ' + (db.get_kollNAME9()) + ' ‚Äî ' + (str(db.get_koll9()))+'\n'
        '10.  ' + (db.get_kollNAME10()) + ' ‚Äî ' + (str(db.get_koll10()))+'\n'
        '11.  ' + (db.get_kollNAME11()) + ' ‚Äî ' + (str(db.get_koll11()))+'\n'
        '12.  ' + (db.get_kollNAME12()) + ' ‚Äî ' + (str(db.get_koll12()))+'\n'
        '13.  ' + (db.get_kollNAME13()) + ' ‚Äî ' + (str(db.get_koll13()))+'\n'     
        '14.  ' + (db.get_kollNAME14()) + ' ‚Äî ' + (str(db.get_koll14()))+'\n'                                                              
        '15.  ' + (db.get_kollNAME15()) + ' ‚Äî ' + (str(db.get_koll15())), parse_mode='html')

    #–≤—ã–∑–æ–≤ –±–æ–Ω—É—Å–æ–≤

    if message.text.lower() == "–±–æ–Ω—É—Å—ã":
	    await message.answer('<b>‚≠ê –°–ü–ò–°–û–ö –í–°–ï–• –î–û–°–¢–£–ü–ù–´–• –ë–û–ù–£–°–û–í: </b>\n \n'
        'üíé ‚Ññ1 <b>–í—Ç–æ—Ä–∞—è –∂–∏–∑–Ω—å</b> '
        '\n–î–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ñ–ª–æ—Ä–µ–Ω—ã, –∫–∞–∫ –∑–∞ –¥–≤–∞ —Ñ–∞—Ä–º–∞.\n'
        '<i>–°—Ç–æ–∏–º–æ—Å—Ç—å: 1500 —Ñ–ª–æ—Ä–µ–Ω–æ–≤</i>'
        '\n\nüïä ‚Ññ2 <b>–õ–∞—Å—Ç–æ—á–∫–∞</b>'
        '\n–°–Ω–∏–∂–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞ –Ω–∞ –æ–¥–∏–Ω —á–∞—Å.\n'
        '<i>–°—Ç–æ–∏–º–æ—Å—Ç—å: 950 —Ñ–ª–æ—Ä–µ–Ω–æ–≤</i>'
        '\n\nüíÆ ‚Ññ3 <b>–õ–∞–∫–æ–º–∫–∞</b> '
         '\n–ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ñ–ª–æ—Ä–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. (–Ω–µ –≤–ª–∏—è–µ—Ç '
         '–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Ä–∞–≤–Ω–æ—Ü–µ–Ω–Ω–æ –æ–±—ã—á–Ω–æ–º—É —Ñ–∞—Ä–º—É)\n'
         '<i>–°—Ç–æ–∏–º–æ—Å—Ç—å: 10000 —Ñ–ª–æ—Ä–µ–Ω–æ–≤</i>'
         '\n\n<i>‚Äº –±–æ–Ω—É—Å—ã –≤—ã–¥–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞</i>', parse_mode='html', reply_markup=nav.mainMenu)

    @dp.callback_query_handler(text_contains="btn")
    async def Bonus(call: types.CallbackQuery):
        your_name = call.from_user.first_name
        if call.data == "btnBonus1":

            if (db.bonus_ex(call.from_user.id)):
                await call.message.answer(f'<b>‚õî | {your_name}, —ç—Ç–æ—Ç –±–æ–Ω—É—Å —É–∂–µ –≤–∞—à!</b>', parse_mode='html')
            else:
                if (int(db.get_balance(call.from_user.id)) > 1500):
                    db.balance_update(int(db.get_balance(call.from_user.id)) - 1500, call.from_user.first_name, call.from_user.id)
                    db.add_bonus(call.from_user.id, call.from_user.first_name)
                    await call.message.answer(f'<b>‚úÖ | {your_name}, –±–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!</b>', parse_mode='html')
                else:
                    await call.message.answer(f'<b>‚õî | {your_name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n<i>(—Ç—Ä–µ–±—É–µ—Ç—Å—è 1500 —Ñ–ª–æ—Ä–µ–Ω–æ–≤)</i>', parse_mode='html')
        elif call.data == "btnBonus2":
            if (db.bonus2_ex(call.from_user.id)):
                await call.message.answer(f'<b>‚õî | {your_name}, —ç—Ç–æ—Ç –±–æ–Ω—É—Å —É–∂–µ –≤–∞—à!</b>', parse_mode='html')
            else:
                if (int(db.get_balance(call.from_user.id)) > 950):
                    db.balance_update(int(db.get_balance(call.from_user.id)) - 950, call.from_user.first_name, call.from_user.id)
                    db.add_bonus2(call.from_user.id, call.from_user.first_name)
                    await call.message.answer(f'<b>‚úÖ | {your_name}, –±–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!</b>', parse_mode='html')
                else:
                    await call.message.answer(
                        f'<b>‚õî | {your_name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n<i>(—Ç—Ä–µ–±—É–µ—Ç—Å—è 950 —Ñ–ª–æ—Ä–µ–Ω–æ–≤)</i>',
                        parse_mode='html')
        elif call.data == "btnBonus3":
            if (db.bonus3_ex(call.from_user.id)):
                await call.message.answer(f'<b>‚õî | {your_name}, —ç—Ç–æ—Ç –±–æ–Ω—É—Å —É–∂–µ –≤–∞—à!</b>', parse_mode='html')
            else:
                if (int(db.get_balance(call.from_user.id)) > 10000):
                    current_datetime = int(time.time()) + minutes_to_seconds(1)
                    db.balance_update(int(db.get_balance(call.from_user.id)) - 10000, call.from_user.first_name, call.from_user.id)
                    db.add_bonus3(call.from_user.id, call.from_user.first_name, current_datetime)
                    await call.message.answer(f'<b>‚úÖ | {your_name}, –±–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!</b>', parse_mode='html')
                else:
                    await call.message.answer(f'<b>‚õî | {your_name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n<i>(—Ç—Ä–µ–±—É–µ—Ç—Å—è 10000 —Ñ–ª–æ—Ä–µ–Ω–æ–≤)</i>', parse_mode='html')



    @dp.callback_query_handler(text_contains="BonusList")
    async def BonusList1(call: types.CallbackQuery):
        if call.data == "BonusList":
            await call.message.answer('<b>‚≠ê –°–ü–ò–°–û–ö –í–°–ï–• –î–û–°–¢–£–ü–ù–´–• –ë–û–ù–£–°–û–í: </b>\n \n'
                                 'üíé ‚Ññ1 <b>–í—Ç–æ—Ä–∞—è –∂–∏–∑–Ω—å</b> '
                                 '\n–î–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ñ–ª–æ—Ä–µ–Ω—ã, –∫–∞–∫ –∑–∞ –¥–≤–∞ —Ñ–∞—Ä–º–∞.\n'
                                 '<i>–°—Ç–æ–∏–º–æ—Å—Ç—å: 1500 —Ñ–ª–æ—Ä–µ–Ω–æ–≤</i>'
                                 '\n\nüïä ‚Ññ2 <b>–õ–∞—Å—Ç–æ—á–∫–∞</b>'
                                 '\n–°–Ω–∏–∂–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞ –Ω–∞ –æ–¥–∏–Ω —á–∞—Å.\n'
                                 '<i>–°—Ç–æ–∏–º–æ—Å—Ç—å: 950 —Ñ–ª–æ—Ä–µ–Ω–æ–≤</i>'                                
                                 '\n\nüíÆ ‚Ññ3 <b>–õ–∞–∫–æ–º–∫–∞</b> '
                                 '\n–ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ñ–ª–æ—Ä–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. (–Ω–µ –≤–ª–∏—è–µ—Ç '
                                 '–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Ä–∞–≤–Ω–æ—Ü–µ–Ω–Ω–æ –æ–±—ã—á–Ω–æ–º—É —Ñ–∞—Ä–º—É)\n'
                                 '<i>–°—Ç–æ–∏–º–æ—Å—Ç—å: 10000 —Ñ–ª–æ—Ä–µ–Ω–æ–≤</i>'
                                 '\n\n<i>‚Äº –±–æ–Ω—É—Å—ã –≤—ã–¥–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞</i>', parse_mode='html', reply_markup=nav.mainMenu)

	#–ú–£–¢–´---------------------------------------------------------------------------------------------------------

    if (not db.user_ex2(message.from_user.id)): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ ct_users
    	db.add_user_mute(message.from_user.id, message.from_user.username)

    if db.mute(message.from_user.id):
    	await message.delete()


   # @dp.message_handler()
   # async def lakomka1(message: types.Message):





    #run long-polling
if __name__ == "__main__":

	executor.start_polling(dp, skip_updates=True)

#if __name__ == "__main__":
	#executor.start_polling(dp, skip_updates=True, on_startup=on_startup)